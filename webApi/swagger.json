{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample kanban application server. <br> Anass Lakhloufi - Anis Kharchi - Abdelmalek Benamirouche - Mohammed Naim Guerroui",
    "version": "1.0.0",
    "title": "Swagger Kanban",
    "termsOfService": "https://git-etudiants.lacl.fr/restProjet2019/anass-lakhloufi-anis-kharchi-abdelmalek-benamirouche-mohammed-naim-guerroui",
    "contact": {
      "email": "abdelmalek.benamirouche@etu.u-pec.fr"
    }
  },
  "host": "127.0.0.1:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "project",
      "description": "Everything about your Projects"
    },
    {
      "name": "card",
      "description": "Access to Project cards"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "dashboard",
      "description": "User's projects and cards"
    },
    {
      "name": "confirmMail",
      "description": "Email confirmation"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/projects": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get all project where the connected user is a member",
        "description": "Returns all the projects that the user participates in with the cards on them",
        "operationId": "getProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of project objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "description": "Token value error"
          },
          "500": {
            "description": "Server problem"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Add a new project to the store",
        "description": "",
        "operationId": "addProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Project object needed to create the project",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Token value error"
          },
          "500": {
            "description": "Server problem"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/projects/{projectId}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find project by ID",
        "description": "Returns a single project",
        "operationId": "getProjectById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of project to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A single project object",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Token value error"
          },
          "403": {
            "description": "Not a project member"
          },
          "500": {
            "description": "Server problem"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Update an existing project",
        "description": "",
        "operationId": "updateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of project to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Project object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated successfully"
          },
          "401": {
            "description": "Token value error"
          },
          "500": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Deletes a project",
        "description": "the connected user must be admin to be able to delete a project",
        "operationId": "deleteProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Token value error"
          },
          "403": {
            "description": "Not a project member or not admin"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/projects/{projectId}/cards": {
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Find cards of a project by ID",
        "description": "Returns all cards of a single project",
        "operationId": "getCardsByProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of project to add a card",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Card objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          },
          "401": {
            "description": "Token value error"
          },
          "403": {
            "description": "Not a project member"
          },
          "500": {
            "description": "Server problem"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "tags": [
          "card"
        ],
        "summary": "Add a new Card to the project",
        "description": "",
        "operationId": "addCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of project to add a card",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Card object needed to add into the project",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card added with success"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Token value error"
          },
          "403": {
            "description": "Not a project member"
          },
          "500": {
            "description": "Server problem"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/project/{projectId}/cards/{cardId}": {
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Find card of a project by ID card",
        "description": "Returns a specific card of a project",
        "operationId": "getCardById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of project to return",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardId",
            "in": "path",
            "description": "ID of the card to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "401": {
            "description": "Token value error"
          },
          "403": {
            "description": "Not a project member"
          },
          "500": {
            "description": "Server problem"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "card"
        ],
        "summary": "Update an existing card",
        "description": "",
        "operationId": "updateCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of project to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardId",
            "in": "path",
            "description": "ID of the card to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Card object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated successfully"
          },
          "401": {
            "description": "Token value error"
          },
          "403": {
            "description": "Not a project member"
          },
          "500": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "card"
        ],
        "summary": "Deletes a card",
        "description": "the connected user must be admin to be able to delete a card",
        "operationId": "deletecCardFromProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project id to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardId",
            "in": "path",
            "description": "ID of the card to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Token value error"
          },
          "403": {
            "description": "Not a project member or not admin"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/signUp": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Missing attributes"
          },
          "500": {
            "description": "Missing attributes"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Token"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/dashbord": {
      "get": {
        "tags": [
          "dashboard"
        ],
        "summary": "get projects and cards of the connected user",
        "description": "Returns all the projects that the user participates in with the cards on them",
        "operationId": "getDashboard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of project objects and a list of card objects",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "401": {
            "description": "Token value error"
          },
          "500": {
            "description": "Server problem"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/confirmMail": {
      "get": {
        "tags": [
          "confirmMail"
        ],
        "summary": "user email confirmation",
        "description": "Confirm the user's email with the link sent when signing up",
        "operationId": "confirm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "This token is found in the link sent by email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "confirmation succedded"
          },
          "401": {
            "description": "Link expired"
          },
          "500": {
            "description": "Server problem"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "description": "the token returned from the login",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Token": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "email",
        "password",
        "firstName",
        "lastName",
        "tel",
        "profession"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "tel": {
          "type": "string"
        },
        "profession": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "Card": {
      "type": "object",
      "required": [
        "title",
        "status",
        "type",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "example": "project description"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "status": {
          "type": "string",
          "example": "Backlog"
        },
        "type": {
          "type": "string",
          "example": "Dev"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "description": {
          "type": "string",
          "example": "project description"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "role": {
                "type": "string",
                "enum": [
                  "admin",
                  "developer",
                  "tester"
                ]
              }
            }
          }
        },
        "cards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Card"
          }
        }
      }
    },
    "Dashboard": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "cards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Card"
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "error": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "int32"
        }
      }
    }
  }
}